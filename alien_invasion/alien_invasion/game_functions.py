#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import pygame
from bullet import Bullet
from alien import Alien
def check_keydown_events(event,ai_settings,screen,ship,bullets):
	#按键响应
	if event.key==pygame.K_RIGHT:
		ship.moving_right=True
	elif event.key==pygame.K_LEFT:
		ship.moving_left=True
	elif event.key==pygame.K_SPACE:
		fire_bullet(ai_settings,screen,ship,bullets)
	elif event.key==pygame.K_q:
		sys.exit()
def check_keyup_events(event,ship):
	if event.key==pygame.K_RIGHT:
		ship.moving_right=False
	elif event.key==pygame.K_LEFT:
		ship.moving_left=False
def check_events(ai_settings,screen,ship,bullets):
	#响应按键和鼠标事件
	for event in pygame.event.get():
		if event.type==pygame.QUIT:
			sys.exit()
		elif event.type==pygame.KEYDOWN:
			check_keydown_events(event,ai_settings,screen,ship,bullets)
		elif event.type==pygame.KEYUP:
			check_keyup_events(event,ship)
def fire_bullet(ai_settings,screen,ship,bullets):
	#如果还没有达到限制，就发射一颗子弹
	#创建一颗子弹，并将其加入编组bullets中
	if len(bullets)<ai_settings.bullets_allowed:
			new_bullet=Bullet(ai_settings,screen,ship)
			bullets.add(new_bullet)
def update_screen(ai_setting,screen,ship,aliens,bullets):
	#更新屏幕上的图像，并切换到新屏幕
	screen.fill(ai_setting.bg_color)
	#在飞船和外星人后面重绘所有子弹
	for bullet in bullets.sprites():
		bullet.draw_bullet()
	ship.blitme()
	#draw()对编组调用draw时，pygame自动绘制编组的每个元素
	aliens.draw(screen)
	#让最近绘制的屏幕可见
	pygame.display.flip()
def update_bullets(bullets):
	#更新子弹的位置，并删除已消失的子弹
	#更新子弹的位置
	bullets.update()
	#删除已消失的子弹
	#在for循环中，不应从列表或编组中删除条目
	for bullet in bullets.copy():
		if bullet.rect.bottom<=0:
			bullets.remove(bullet)
def get_number_aliens_x(ai_settings,alien_width):
	#计算每行可容纳多少外星人
	available_space_x=ai_settings.screen_width-2*alien_width
	number_aliens_x=int(available_space_x/(2*alien_width))
	return number_aliens_x
def create_alien(ai_settings,screen,aliens,alien_number):
	#创建一个外星人并将其放在当前行
	alien=Alien(ai_settings,screen)
	alien_width=alien.rect.width
	alien.x=alien_width+2*alien_width*alien_number
	alien.rect.x=alien.x
	aliens.add(alien)
def create_fleet(ai_settings,screen,aliens):
	#创建外星人群
	#创建一个外星人，并计算每行可以容纳多少个外星人
	alien=Alien(ai_settings,screen)
	number_aliens_x=get_number_aliens_x(ai_settings,alien.rect.width)
	#创建第一行外星人
	for alien_number in range(number_aliens_x):
		#创建一个外星人并将其加入当前行
		create_alien(ai_settings,screen,aliens,alien_number)
	
